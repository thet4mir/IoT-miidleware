// Code generated by protoc-gen-go. DO NOT EDIT.
// source: device.proto

package devicepb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Device struct {
	IdVendor             string   `protobuf:"bytes,1,opt,name=id_vendor,json=idVendor,proto3" json:"id_vendor,omitempty"`
	IdProduct            string   `protobuf:"bytes,2,opt,name=id_product,json=idProduct,proto3" json:"id_product,omitempty"`
	Serial               string   `protobuf:"bytes,3,opt,name=serial,proto3" json:"serial,omitempty"`
	Action               string   `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Device) Reset()         { *m = Device{} }
func (m *Device) String() string { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()    {}
func (*Device) Descriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{0}
}

func (m *Device) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Device.Unmarshal(m, b)
}
func (m *Device) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Device.Marshal(b, m, deterministic)
}
func (m *Device) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Device.Merge(m, src)
}
func (m *Device) XXX_Size() int {
	return xxx_messageInfo_Device.Size(m)
}
func (m *Device) XXX_DiscardUnknown() {
	xxx_messageInfo_Device.DiscardUnknown(m)
}

var xxx_messageInfo_Device proto.InternalMessageInfo

func (m *Device) GetIdVendor() string {
	if m != nil {
		return m.IdVendor
	}
	return ""
}

func (m *Device) GetIdProduct() string {
	if m != nil {
		return m.IdProduct
	}
	return ""
}

func (m *Device) GetSerial() string {
	if m != nil {
		return m.Serial
	}
	return ""
}

func (m *Device) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

type DeviceUpdateRequest struct {
	Device               *Device  `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceUpdateRequest) Reset()         { *m = DeviceUpdateRequest{} }
func (m *DeviceUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*DeviceUpdateRequest) ProtoMessage()    {}
func (*DeviceUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{1}
}

func (m *DeviceUpdateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceUpdateRequest.Unmarshal(m, b)
}
func (m *DeviceUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceUpdateRequest.Marshal(b, m, deterministic)
}
func (m *DeviceUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceUpdateRequest.Merge(m, src)
}
func (m *DeviceUpdateRequest) XXX_Size() int {
	return xxx_messageInfo_DeviceUpdateRequest.Size(m)
}
func (m *DeviceUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceUpdateRequest proto.InternalMessageInfo

func (m *DeviceUpdateRequest) GetDevice() *Device {
	if m != nil {
		return m.Device
	}
	return nil
}

type DeviceUpdateResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceUpdateResponse) Reset()         { *m = DeviceUpdateResponse{} }
func (m *DeviceUpdateResponse) String() string { return proto.CompactTextString(m) }
func (*DeviceUpdateResponse) ProtoMessage()    {}
func (*DeviceUpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{2}
}

func (m *DeviceUpdateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceUpdateResponse.Unmarshal(m, b)
}
func (m *DeviceUpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceUpdateResponse.Marshal(b, m, deterministic)
}
func (m *DeviceUpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceUpdateResponse.Merge(m, src)
}
func (m *DeviceUpdateResponse) XXX_Size() int {
	return xxx_messageInfo_DeviceUpdateResponse.Size(m)
}
func (m *DeviceUpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceUpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceUpdateResponse proto.InternalMessageInfo

type DeviceListRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceListRequest) Reset()         { *m = DeviceListRequest{} }
func (m *DeviceListRequest) String() string { return proto.CompactTextString(m) }
func (*DeviceListRequest) ProtoMessage()    {}
func (*DeviceListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{3}
}

func (m *DeviceListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceListRequest.Unmarshal(m, b)
}
func (m *DeviceListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceListRequest.Marshal(b, m, deterministic)
}
func (m *DeviceListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceListRequest.Merge(m, src)
}
func (m *DeviceListRequest) XXX_Size() int {
	return xxx_messageInfo_DeviceListRequest.Size(m)
}
func (m *DeviceListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceListRequest proto.InternalMessageInfo

type DeviceListResponse struct {
	Device               []*Device `protobuf:"bytes,1,rep,name=device,proto3" json:"device,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *DeviceListResponse) Reset()         { *m = DeviceListResponse{} }
func (m *DeviceListResponse) String() string { return proto.CompactTextString(m) }
func (*DeviceListResponse) ProtoMessage()    {}
func (*DeviceListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{4}
}

func (m *DeviceListResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceListResponse.Unmarshal(m, b)
}
func (m *DeviceListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceListResponse.Marshal(b, m, deterministic)
}
func (m *DeviceListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceListResponse.Merge(m, src)
}
func (m *DeviceListResponse) XXX_Size() int {
	return xxx_messageInfo_DeviceListResponse.Size(m)
}
func (m *DeviceListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceListResponse proto.InternalMessageInfo

func (m *DeviceListResponse) GetDevice() []*Device {
	if m != nil {
		return m.Device
	}
	return nil
}

func init() {
	proto.RegisterType((*Device)(nil), "devices.Device")
	proto.RegisterType((*DeviceUpdateRequest)(nil), "devices.DeviceUpdateRequest")
	proto.RegisterType((*DeviceUpdateResponse)(nil), "devices.DeviceUpdateResponse")
	proto.RegisterType((*DeviceListRequest)(nil), "devices.DeviceListRequest")
	proto.RegisterType((*DeviceListResponse)(nil), "devices.DeviceListResponse")
}

func init() {
	proto.RegisterFile("device.proto", fileDescriptor_870276a56ac00da5)
}

var fileDescriptor_870276a56ac00da5 = []byte{
	// 265 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x51, 0x4d, 0x4b, 0xc3, 0x40,
	0x10, 0x35, 0x56, 0x62, 0x33, 0x56, 0xc4, 0xa9, 0x94, 0x90, 0x5a, 0x90, 0xbd, 0xe8, 0x29, 0x48,
	0x3d, 0xeb, 0x41, 0xbc, 0x08, 0x0a, 0x12, 0xd1, 0x83, 0x97, 0x92, 0x66, 0xe7, 0xb0, 0x20, 0xd9,
	0x75, 0x77, 0xdb, 0xff, 0xe4, 0xbf, 0x14, 0x77, 0x56, 0x4c, 0x8a, 0xf6, 0x96, 0xf7, 0x31, 0xf3,
	0xde, 0x64, 0x61, 0x24, 0x69, 0xad, 0x1a, 0x2a, 0x8d, 0xd5, 0x5e, 0xe3, 0x3e, 0x23, 0x27, 0x3c,
	0xa4, 0x77, 0xe1, 0x13, 0xa7, 0x90, 0x29, 0xb9, 0x58, 0x53, 0x2b, 0xb5, 0xcd, 0x93, 0xb3, 0xe4,
	0x22, 0xab, 0x86, 0x4a, 0xbe, 0x06, 0x8c, 0x33, 0x00, 0x25, 0x17, 0xc6, 0x6a, 0xb9, 0x6a, 0x7c,
	0xbe, 0x1b, 0xd4, 0x4c, 0xc9, 0x27, 0x26, 0x70, 0x02, 0xa9, 0x23, 0xab, 0xea, 0xf7, 0x7c, 0x10,
	0xa4, 0x88, 0xbe, 0xf9, 0xba, 0xf1, 0x4a, 0xb7, 0xf9, 0x1e, 0xf3, 0x8c, 0xc4, 0x0d, 0x8c, 0x39,
	0xf5, 0xc5, 0xc8, 0xda, 0x53, 0x45, 0x1f, 0x2b, 0x72, 0x1e, 0xcf, 0x21, 0xe5, 0x5e, 0x21, 0xff,
	0x60, 0x7e, 0x54, 0xc6, 0x9a, 0x25, 0xbb, 0xab, 0x28, 0x8b, 0x09, 0x9c, 0xf4, 0xe7, 0x9d, 0xd1,
	0xad, 0x23, 0x31, 0x86, 0x63, 0xe6, 0x1f, 0x94, 0xf3, 0x71, 0xab, 0xb8, 0x06, 0xec, 0x92, 0x6c,
	0xed, 0x65, 0x0d, 0xb6, 0x64, 0xcd, 0x3f, 0x13, 0x38, 0x64, 0xea, 0x99, 0x6c, 0xf8, 0x53, 0x8f,
	0x30, 0xea, 0xa6, 0xe3, 0xe9, 0xc6, 0x68, 0xef, 0xa8, 0x62, 0xf6, 0x8f, 0x1a, 0x2b, 0xef, 0xe0,
	0x3d, 0xc0, 0x6f, 0x3f, 0x2c, 0x36, 0xec, 0x9d, 0x4b, 0x8a, 0xe9, 0x9f, 0xda, 0xcf, 0xa2, 0xcb,
	0xe4, 0x16, 0xde, 0x86, 0xec, 0x30, 0xcb, 0x65, 0x1a, 0x5e, 0xfa, 0xea, 0x2b, 0x00, 0x00, 0xff,
	0xff, 0x61, 0x37, 0xba, 0x75, 0xf9, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DeviceServiceClient is the client API for DeviceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeviceServiceClient interface {
	DeviceUpdate(ctx context.Context, in *DeviceUpdateRequest, opts ...grpc.CallOption) (*DeviceUpdateResponse, error)
	DeviceList(ctx context.Context, in *DeviceListRequest, opts ...grpc.CallOption) (DeviceService_DeviceListClient, error)
}

type deviceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceServiceClient(cc grpc.ClientConnInterface) DeviceServiceClient {
	return &deviceServiceClient{cc}
}

func (c *deviceServiceClient) DeviceUpdate(ctx context.Context, in *DeviceUpdateRequest, opts ...grpc.CallOption) (*DeviceUpdateResponse, error) {
	out := new(DeviceUpdateResponse)
	err := c.cc.Invoke(ctx, "/devices.DeviceService/DeviceUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) DeviceList(ctx context.Context, in *DeviceListRequest, opts ...grpc.CallOption) (DeviceService_DeviceListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DeviceService_serviceDesc.Streams[0], "/devices.DeviceService/DeviceList", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceServiceDeviceListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceService_DeviceListClient interface {
	Recv() (*DeviceListResponse, error)
	grpc.ClientStream
}

type deviceServiceDeviceListClient struct {
	grpc.ClientStream
}

func (x *deviceServiceDeviceListClient) Recv() (*DeviceListResponse, error) {
	m := new(DeviceListResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DeviceServiceServer is the server API for DeviceService service.
type DeviceServiceServer interface {
	DeviceUpdate(context.Context, *DeviceUpdateRequest) (*DeviceUpdateResponse, error)
	DeviceList(*DeviceListRequest, DeviceService_DeviceListServer) error
}

// UnimplementedDeviceServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDeviceServiceServer struct {
}

func (*UnimplementedDeviceServiceServer) DeviceUpdate(ctx context.Context, req *DeviceUpdateRequest) (*DeviceUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceUpdate not implemented")
}
func (*UnimplementedDeviceServiceServer) DeviceList(req *DeviceListRequest, srv DeviceService_DeviceListServer) error {
	return status.Errorf(codes.Unimplemented, "method DeviceList not implemented")
}

func RegisterDeviceServiceServer(s *grpc.Server, srv DeviceServiceServer) {
	s.RegisterService(&_DeviceService_serviceDesc, srv)
}

func _DeviceService_DeviceUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).DeviceUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/devices.DeviceService/DeviceUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).DeviceUpdate(ctx, req.(*DeviceUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_DeviceList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceServiceServer).DeviceList(m, &deviceServiceDeviceListServer{stream})
}

type DeviceService_DeviceListServer interface {
	Send(*DeviceListResponse) error
	grpc.ServerStream
}

type deviceServiceDeviceListServer struct {
	grpc.ServerStream
}

func (x *deviceServiceDeviceListServer) Send(m *DeviceListResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _DeviceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "devices.DeviceService",
	HandlerType: (*DeviceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeviceUpdate",
			Handler:    _DeviceService_DeviceUpdate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DeviceList",
			Handler:       _DeviceService_DeviceList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "device.proto",
}
